# example docker-compose for push/build for production release
# this file only require  CONTAINER_REGISTRY_BASE and optional IMAGE_TAG environment variable.
version: "3.7"
x-cache-from:
  - &ergonode-cache-from
    cache_from:
      - ${CONTAINER_REGISTRY_BASE:-ergonode}/nginx:latest
      - ${CONTAINER_REGISTRY_BASE:-ergonode}/php:latest
      - ${CONTAINER_REGISTRY_BASE:-ergonode}/nuxtjs:latest
      - ${CONTAINER_REGISTRY_BASE:-ergonode}/docsify:latest
      - ${CONTAINER_REGISTRY_BASE:-ergonode}/rabbitmq:latest
services:
  php:
    build:
      context: "./"
      target: php_production
      <<: *ergonode-cache-from
    image: ${CONTAINER_REGISTRY_BASE:?Missing mandatory value for CONTAINER_REGISTRY_BASE}/php:${IMAGE_TAG:-latest}
  nuxtjs:
    build:
      context: "./"
      target: nuxtjs_production
      <<: *ergonode-cache-from
    image: ${CONTAINER_REGISTRY_BASE:?Missing mandatory value for CONTAINER_REGISTRY_BASE}/nuxtjs:${IMAGE_TAG:-latest}
  nginx:
    build:
      context: "./"
      target: nginx
      <<: *ergonode-cache-from
    image: ${CONTAINER_REGISTRY_BASE:?Missing mandatory value for CONTAINER_REGISTRY_BASE}/nginx:${IMAGE_TAG:-latest}
  postgres:
    build:
      context: "./"
      target: postgres
      <<: *ergonode-cache-from
    image: ${CONTAINER_REGISTRY_BASE:?Missing mandatory value for CONTAINER_REGISTRY_BASE}/postgres:${IMAGE_TAG:-latest}
  rabbitmq:
    build:
      context: "./"
      target: rabbitmq-management
      <<: *ergonode-cache-from
    image: ${CONTAINER_REGISTRY_BASE:?Missing mandatory value for CONTAINER_REGISTRY_BASE}/rabbitmq:${IMAGE_TAG:-latest}
