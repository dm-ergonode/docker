#docker-compose for development
version: "3.7"
services:
    postgres:
        build:
          context: "./"
          target: postgres_development
          cache_from:
              - ${CONTAINER_REGISTRY_BASE:-ergonode}/postgres:latest
          dockerfile: Dockerfile-postgres
        image: ${CONTAINER_REGISTRY_BASE:-ergonode}/postgres:${IMAGE_TAG:-latest}
        volumes:
            - "./data/.postgres:/var/lib/postgresql/data"
        environment:
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123}
            POSTGRES_DB: ${POSTGRES_DB:-postgres}
            APP_USER: ${APP_USER:-ergonode}
            APP_USER_PASSWORD: ${APP_USER_PASSWORD:-123}
            APP_DB: ${APP_DB:-ergonode}
            APP_TEST_DB: ${APP_TEST_DB:-ergonode_test}
        ports:
            - "${EXPOSED_POSTGRES_PORT:-5432}:5432"
        restart: always
    php:
        build:
            context: "./"
            target: php_development
            cache_from:
                - ${CONTAINER_REGISTRY_BASE:-ergonode}/php:latest
            dockerfile: Dockerfile-backend
        working_dir: /srv/app
        image: ${CONTAINER_REGISTRY_BASE:-ergonode}/php:${IMAGE_TAG:-latest}
        volumes:
            - ./backend:/srv/app
            - ./config/php/override.ini:/usr/local/etc/php/conf.d/override.ini

        environment:
            XDEBUG_CONFIG: ${XDEBUG_CONFIG:-remote_host=172.17.0.1}
            PHP_IDE_CONFIG: ${PHP_IDE_CONFIG:-serverName=localhost}
            APP_URL: ${APP_URL:-http://nginx}
            JWT_PRIVATE_KEY_PATH: ${JWT_PRIVATE_KEY_PATH:-config/jwt/private.pem}
            JWT_PUBLIC_KEY_PATH: ${JWT_PUBLIC_KEY_PATH:-config/jwt/public.pem}
            JWT_PASSPHRASE: ${JWT_PASSPHRASE:-1234}
        depends_on:
            - postgres
        links:
            - postgres
        restart: always
    nginx:
        build:
            context: ./
            target: nginx_development
            cache_from:
                - ${CONTAINER_REGISTRY_BASE:-ergonode}/nginx:latest
            dockerfile: Dockerfile-backend
        image: ${CONTAINER_REGISTRY_BASE:-ergonode}/nginx:${IMAGE_TAG:-latest}
        volumes:
            - ./backend:/srv/app
            - ./config/nginx/conf.d/symfony-development.conf.template:/etc/nginx/conf.d/symfony-development.conf.template:ro
            - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        working_dir: /srv/app
        environment:
            PHP_UPSTREAM_HOST: php
            DOLLAR: "$$"
        ports:
            - "${EXPOSED_NGINX_PORT:-8000}:80"
        depends_on:
            - php
        command: /bin/bash -c "envsubst < /etc/nginx/conf.d/symfony-development.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
        restart: always
    node:
        build:
            context: "./"
            target: node_development
            cache_from:
                - ${CONTAINER_REGISTRY_BASE:-ergonode}/node:latest
            dockerfile: Dockerfile-node
        image: ${CONTAINER_REGISTRY_BASE:-ergonode}/node:${IMAGE_TAG:-latest}
        working_dir: /srv/app
        volumes:
            - "./frontend:/srv/app"
        ports:
            - "${EXPOSED_NODE_PORT:-80}:80"
        environment:
            EXPOSED_NODE_PORT: ${EXPOSED_NODE_PORT:-80}
            API_PORT: ${API_PORT:-8000}
        restart: always
    docs:
        build:
            context: "./"
            target: docs_final
            cache_from:
                - ${CONTAINER_REGISTRY_BASE:-ergonode}/docs:latest
            dockerfile: Dockerfile-node
        image: ${CONTAINER_REGISTRY_BASE:-ergonode}/docs:${IMAGE_TAG:-latest}
        working_dir: /srv/app
        volumes:
            - "./docs:/srv/app"
        ports:
            - "${EXPOSED_DOCS_PORT:-8002}:3000"
        restart: always
    rabbitmq:
        image: "rabbitmq:3.8-management"
        volumes:
            - "./config/rabbitmq/rabbitmq-healthcheck.sh:/usr/local/bin/rabbitmq-healthcheck.sh"
        healthcheck:
            test: ["CMD", "bash", "-c", "/usr/local/bin/rabbitmq-healthcheck.sh"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 5s
        restart: always
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-ergonode}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-ergonode}
        ports:
            - "${EXPOSED_RABBITMQ_PORT:-5672}:5672"
            - "${EXPOSED_RABBITMQ_WEB_PORT:-15672}:15672"
