version: "3.4"
services:
    postgres:
        image: "postgres:10-alpine"
        volumes:
            - "./data/.postgres:/var/lib/postgresql/data"
            - "./config/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d"
            - "./config/postgres/postgres-healthcheck.sh:/usr/local/bin/postgres-healthcheck.sh"
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            APP_USER: ${APP_USER}
            APP_USER_PASSWORD: ${APP_USER_PASSWORD}
            APP_DB: ${APP_DB}
            APP_TEST_DB: ${APP_TEST_DB}
        ports:
            - "${EXPOSED_POSTGRES_PORT}:5432"
        restart: always
        healthcheck:
            test: ["CMD", "bash", "-c", "/usr/local/bin/postgres-healthcheck.sh"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 5s
    php:
        build:
            context: "./"
            target: ${PHP_FINAL_TARGET}
        working_dir: /srv/app
        volumes:
            - ./../backend:/srv/app
            - ./config/php/override.ini:/usr/local/etc/php/conf.d/override.ini
        env_file:
          - ./.env
        depends_on:
            - postgres
        links:
            - postgres
        restart: always
    nginx:
        build:
            context: ./
            target: nginx_final
        volumes:
            - ./../backend:/srv/app
            - ./config/nginx/conf.d/symfony-development.conf.template:/etc/nginx/conf.d/symfony-development.conf.template:ro
            - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        working_dir: /srv/app
        environment:
            PHP_UPSTREAM_HOST: php
            DOLLAR: "$$"
        ports:
            - "${EXPOSED_NGINX_PORT}:80"
        depends_on:
            - php
        command: /bin/bash -c "envsubst < /etc/nginx/conf.d/symfony-development.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
        restart: always
    node:
        build:
            context: "./"
            target: node_final
        working_dir: /srv/app
        volumes:
            - "./../frontend:/srv/app"
        ports:
            - "${EXPOSED_NODE_PORT}:80"
        environment:
            EXPOSED_NODE_PORT: ${EXPOSED_NODE_PORT}
            API_PORT: ${API_PORT}
        restart: always
    docs:
        build:
            context: "./"
            target: docs_final
        working_dir: /srv/app
        volumes:
            - "./../docs:/srv/app"
        ports:
            - "${EXPOSED_DOCS_PORT}:3000"
        restart: always
    rabbitmq:
        image: "rabbitmq:3.8-management"
        volumes:
            - "./config/rabbitmq/rabbitmq-healthcheck.sh:/usr/local/bin/rabbitmq-healthcheck.sh"
        healthcheck:
            test: ["CMD", "bash", "-c", "/usr/local/bin/rabbitmq-healthcheck.sh"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 5s
        restart: always
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        ports:
            - "${EXPOSED_RABBITMQ_PORT}:5672"
            - "${EXPOSED_RABBITMQ_WEB_PORT}:15672"
